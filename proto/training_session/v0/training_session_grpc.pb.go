// vitainmove.com/proto-go
// shared proto module for vitainmove project microservices
// Copyright (C) 2025  Mikhail Kulik

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: training_session/v0/training_session.proto

package trainingsesssionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrainingSessionService_GetTrainingSession_FullMethodName    = "/training_session.v0.TrainingSessionService/GetTrainingSession"
	TrainingSessionService_ListTrainingSessions_FullMethodName  = "/training_session.v0.TrainingSessionService/ListTrainingSessions"
	TrainingSessionService_CreateTrainingSession_FullMethodName = "/training_session.v0.TrainingSessionService/CreateTrainingSession"
	TrainingSessionService_UpdateTrainingSession_FullMethodName = "/training_session.v0.TrainingSessionService/UpdateTrainingSession"
	TrainingSessionService_DeleteTrainingSession_FullMethodName = "/training_session.v0.TrainingSessionService/DeleteTrainingSession"
)

// TrainingSessionServiceClient is the client API for TrainingSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainingSessionServiceClient interface {
	GetTrainingSession(ctx context.Context, in *GetTrainingSessionRequest, opts ...grpc.CallOption) (*GetTrainingSessionResponse, error)
	ListTrainingSessions(ctx context.Context, in *ListTrainingSessionsRequest, opts ...grpc.CallOption) (*ListTrainingSessionsResponse, error)
	CreateTrainingSession(ctx context.Context, in *CreateTrainingSessionRequest, opts ...grpc.CallOption) (*CreateTrainingSessionResponse, error)
	UpdateTrainingSession(ctx context.Context, in *UpdateTrainingSessionRequest, opts ...grpc.CallOption) (*UpdateTrainingSessionResponse, error)
	DeleteTrainingSession(ctx context.Context, in *DeleteTrainingSessionRequest, opts ...grpc.CallOption) (*DeleteTrainingSessionResponse, error)
}

type trainingSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainingSessionServiceClient(cc grpc.ClientConnInterface) TrainingSessionServiceClient {
	return &trainingSessionServiceClient{cc}
}

func (c *trainingSessionServiceClient) GetTrainingSession(ctx context.Context, in *GetTrainingSessionRequest, opts ...grpc.CallOption) (*GetTrainingSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainingSessionResponse)
	err := c.cc.Invoke(ctx, TrainingSessionService_GetTrainingSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingSessionServiceClient) ListTrainingSessions(ctx context.Context, in *ListTrainingSessionsRequest, opts ...grpc.CallOption) (*ListTrainingSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTrainingSessionsResponse)
	err := c.cc.Invoke(ctx, TrainingSessionService_ListTrainingSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingSessionServiceClient) CreateTrainingSession(ctx context.Context, in *CreateTrainingSessionRequest, opts ...grpc.CallOption) (*CreateTrainingSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTrainingSessionResponse)
	err := c.cc.Invoke(ctx, TrainingSessionService_CreateTrainingSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingSessionServiceClient) UpdateTrainingSession(ctx context.Context, in *UpdateTrainingSessionRequest, opts ...grpc.CallOption) (*UpdateTrainingSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTrainingSessionResponse)
	err := c.cc.Invoke(ctx, TrainingSessionService_UpdateTrainingSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingSessionServiceClient) DeleteTrainingSession(ctx context.Context, in *DeleteTrainingSessionRequest, opts ...grpc.CallOption) (*DeleteTrainingSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTrainingSessionResponse)
	err := c.cc.Invoke(ctx, TrainingSessionService_DeleteTrainingSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingSessionServiceServer is the server API for TrainingSessionService service.
// All implementations must embed UnimplementedTrainingSessionServiceServer
// for forward compatibility.
type TrainingSessionServiceServer interface {
	GetTrainingSession(context.Context, *GetTrainingSessionRequest) (*GetTrainingSessionResponse, error)
	ListTrainingSessions(context.Context, *ListTrainingSessionsRequest) (*ListTrainingSessionsResponse, error)
	CreateTrainingSession(context.Context, *CreateTrainingSessionRequest) (*CreateTrainingSessionResponse, error)
	UpdateTrainingSession(context.Context, *UpdateTrainingSessionRequest) (*UpdateTrainingSessionResponse, error)
	DeleteTrainingSession(context.Context, *DeleteTrainingSessionRequest) (*DeleteTrainingSessionResponse, error)
	mustEmbedUnimplementedTrainingSessionServiceServer()
}

// UnimplementedTrainingSessionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrainingSessionServiceServer struct{}

func (UnimplementedTrainingSessionServiceServer) GetTrainingSession(context.Context, *GetTrainingSessionRequest) (*GetTrainingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainingSession not implemented")
}
func (UnimplementedTrainingSessionServiceServer) ListTrainingSessions(context.Context, *ListTrainingSessionsRequest) (*ListTrainingSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrainingSessions not implemented")
}
func (UnimplementedTrainingSessionServiceServer) CreateTrainingSession(context.Context, *CreateTrainingSessionRequest) (*CreateTrainingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrainingSession not implemented")
}
func (UnimplementedTrainingSessionServiceServer) UpdateTrainingSession(context.Context, *UpdateTrainingSessionRequest) (*UpdateTrainingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrainingSession not implemented")
}
func (UnimplementedTrainingSessionServiceServer) DeleteTrainingSession(context.Context, *DeleteTrainingSessionRequest) (*DeleteTrainingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrainingSession not implemented")
}
func (UnimplementedTrainingSessionServiceServer) mustEmbedUnimplementedTrainingSessionServiceServer() {
}
func (UnimplementedTrainingSessionServiceServer) testEmbeddedByValue() {}

// UnsafeTrainingSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainingSessionServiceServer will
// result in compilation errors.
type UnsafeTrainingSessionServiceServer interface {
	mustEmbedUnimplementedTrainingSessionServiceServer()
}

func RegisterTrainingSessionServiceServer(s grpc.ServiceRegistrar, srv TrainingSessionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrainingSessionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrainingSessionService_ServiceDesc, srv)
}

func _TrainingSessionService_GetTrainingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSessionServiceServer).GetTrainingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingSessionService_GetTrainingSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSessionServiceServer).GetTrainingSession(ctx, req.(*GetTrainingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingSessionService_ListTrainingSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrainingSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSessionServiceServer).ListTrainingSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingSessionService_ListTrainingSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSessionServiceServer).ListTrainingSessions(ctx, req.(*ListTrainingSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingSessionService_CreateTrainingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrainingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSessionServiceServer).CreateTrainingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingSessionService_CreateTrainingSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSessionServiceServer).CreateTrainingSession(ctx, req.(*CreateTrainingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingSessionService_UpdateTrainingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrainingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSessionServiceServer).UpdateTrainingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingSessionService_UpdateTrainingSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSessionServiceServer).UpdateTrainingSession(ctx, req.(*UpdateTrainingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingSessionService_DeleteTrainingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrainingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSessionServiceServer).DeleteTrainingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingSessionService_DeleteTrainingSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSessionServiceServer).DeleteTrainingSession(ctx, req.(*DeleteTrainingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainingSessionService_ServiceDesc is the grpc.ServiceDesc for TrainingSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainingSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training_session.v0.TrainingSessionService",
	HandlerType: (*TrainingSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrainingSession",
			Handler:    _TrainingSessionService_GetTrainingSession_Handler,
		},
		{
			MethodName: "ListTrainingSessions",
			Handler:    _TrainingSessionService_ListTrainingSessions_Handler,
		},
		{
			MethodName: "CreateTrainingSession",
			Handler:    _TrainingSessionService_CreateTrainingSession_Handler,
		},
		{
			MethodName: "UpdateTrainingSession",
			Handler:    _TrainingSessionService_UpdateTrainingSession_Handler,
		},
		{
			MethodName: "DeleteTrainingSession",
			Handler:    _TrainingSessionService_DeleteTrainingSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "training_session/v0/training_session.proto",
}
