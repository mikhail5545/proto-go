// github.com/mikhail5545/proto-go
// shared proto module for vitainmove project microservices
// Copyright (C) 2025  Mikhail Kulik

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: mux_upload/v0/mux_upload.proto

package muxpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MuxUploadService_GetMuxUpload_FullMethodName    = "/mux_upload.v0.MuxUploadService/GetMuxUpload"
	MuxUploadService_ListMuxUploads_FullMethodName  = "/mux_upload.v0.MuxUploadService/ListMuxUploads"
	MuxUploadService_CreateMuxUpload_FullMethodName = "/mux_upload.v0.MuxUploadService/CreateMuxUpload"
	MuxUploadService_UpdateMuxUpload_FullMethodName = "/mux_upload.v0.MuxUploadService/UpdateMuxUpload"
	MuxUploadService_DeleteMuxUpload_FullMethodName = "/mux_upload.v0.MuxUploadService/DeleteMuxUpload"
)

// MuxUploadServiceClient is the client API for MuxUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MuxUploadServiceClient interface {
	GetMuxUpload(ctx context.Context, in *GetMuxUploadRequest, opts ...grpc.CallOption) (*GetMuxUploadResponse, error)
	ListMuxUploads(ctx context.Context, in *ListMuxUploadsRequest, opts ...grpc.CallOption) (*ListMuxUploadsResponse, error)
	CreateMuxUpload(ctx context.Context, in *CreateMuxUploadRequest, opts ...grpc.CallOption) (*CreateMuxUploadResponse, error)
	UpdateMuxUpload(ctx context.Context, in *UpdateMuxUploadRequest, opts ...grpc.CallOption) (*UpdateMuxUploadResponse, error)
	DeleteMuxUpload(ctx context.Context, in *DeleteMuxUploadRequest, opts ...grpc.CallOption) (*DeleteMuxUploadResponse, error)
}

type muxUploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMuxUploadServiceClient(cc grpc.ClientConnInterface) MuxUploadServiceClient {
	return &muxUploadServiceClient{cc}
}

func (c *muxUploadServiceClient) GetMuxUpload(ctx context.Context, in *GetMuxUploadRequest, opts ...grpc.CallOption) (*GetMuxUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMuxUploadResponse)
	err := c.cc.Invoke(ctx, MuxUploadService_GetMuxUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *muxUploadServiceClient) ListMuxUploads(ctx context.Context, in *ListMuxUploadsRequest, opts ...grpc.CallOption) (*ListMuxUploadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMuxUploadsResponse)
	err := c.cc.Invoke(ctx, MuxUploadService_ListMuxUploads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *muxUploadServiceClient) CreateMuxUpload(ctx context.Context, in *CreateMuxUploadRequest, opts ...grpc.CallOption) (*CreateMuxUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMuxUploadResponse)
	err := c.cc.Invoke(ctx, MuxUploadService_CreateMuxUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *muxUploadServiceClient) UpdateMuxUpload(ctx context.Context, in *UpdateMuxUploadRequest, opts ...grpc.CallOption) (*UpdateMuxUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMuxUploadResponse)
	err := c.cc.Invoke(ctx, MuxUploadService_UpdateMuxUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *muxUploadServiceClient) DeleteMuxUpload(ctx context.Context, in *DeleteMuxUploadRequest, opts ...grpc.CallOption) (*DeleteMuxUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMuxUploadResponse)
	err := c.cc.Invoke(ctx, MuxUploadService_DeleteMuxUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MuxUploadServiceServer is the server API for MuxUploadService service.
// All implementations must embed UnimplementedMuxUploadServiceServer
// for forward compatibility.
type MuxUploadServiceServer interface {
	GetMuxUpload(context.Context, *GetMuxUploadRequest) (*GetMuxUploadResponse, error)
	ListMuxUploads(context.Context, *ListMuxUploadsRequest) (*ListMuxUploadsResponse, error)
	CreateMuxUpload(context.Context, *CreateMuxUploadRequest) (*CreateMuxUploadResponse, error)
	UpdateMuxUpload(context.Context, *UpdateMuxUploadRequest) (*UpdateMuxUploadResponse, error)
	DeleteMuxUpload(context.Context, *DeleteMuxUploadRequest) (*DeleteMuxUploadResponse, error)
	mustEmbedUnimplementedMuxUploadServiceServer()
}

// UnimplementedMuxUploadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMuxUploadServiceServer struct{}

func (UnimplementedMuxUploadServiceServer) GetMuxUpload(context.Context, *GetMuxUploadRequest) (*GetMuxUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMuxUpload not implemented")
}
func (UnimplementedMuxUploadServiceServer) ListMuxUploads(context.Context, *ListMuxUploadsRequest) (*ListMuxUploadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMuxUploads not implemented")
}
func (UnimplementedMuxUploadServiceServer) CreateMuxUpload(context.Context, *CreateMuxUploadRequest) (*CreateMuxUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMuxUpload not implemented")
}
func (UnimplementedMuxUploadServiceServer) UpdateMuxUpload(context.Context, *UpdateMuxUploadRequest) (*UpdateMuxUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMuxUpload not implemented")
}
func (UnimplementedMuxUploadServiceServer) DeleteMuxUpload(context.Context, *DeleteMuxUploadRequest) (*DeleteMuxUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMuxUpload not implemented")
}
func (UnimplementedMuxUploadServiceServer) mustEmbedUnimplementedMuxUploadServiceServer() {}
func (UnimplementedMuxUploadServiceServer) testEmbeddedByValue()                          {}

// UnsafeMuxUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MuxUploadServiceServer will
// result in compilation errors.
type UnsafeMuxUploadServiceServer interface {
	mustEmbedUnimplementedMuxUploadServiceServer()
}

func RegisterMuxUploadServiceServer(s grpc.ServiceRegistrar, srv MuxUploadServiceServer) {
	// If the following call pancis, it indicates UnimplementedMuxUploadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MuxUploadService_ServiceDesc, srv)
}

func _MuxUploadService_GetMuxUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMuxUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxUploadServiceServer).GetMuxUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MuxUploadService_GetMuxUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxUploadServiceServer).GetMuxUpload(ctx, req.(*GetMuxUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MuxUploadService_ListMuxUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMuxUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxUploadServiceServer).ListMuxUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MuxUploadService_ListMuxUploads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxUploadServiceServer).ListMuxUploads(ctx, req.(*ListMuxUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MuxUploadService_CreateMuxUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMuxUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxUploadServiceServer).CreateMuxUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MuxUploadService_CreateMuxUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxUploadServiceServer).CreateMuxUpload(ctx, req.(*CreateMuxUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MuxUploadService_UpdateMuxUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMuxUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxUploadServiceServer).UpdateMuxUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MuxUploadService_UpdateMuxUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxUploadServiceServer).UpdateMuxUpload(ctx, req.(*UpdateMuxUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MuxUploadService_DeleteMuxUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMuxUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxUploadServiceServer).DeleteMuxUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MuxUploadService_DeleteMuxUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxUploadServiceServer).DeleteMuxUpload(ctx, req.(*DeleteMuxUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MuxUploadService_ServiceDesc is the grpc.ServiceDesc for MuxUploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MuxUploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mux_upload.v0.MuxUploadService",
	HandlerType: (*MuxUploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMuxUpload",
			Handler:    _MuxUploadService_GetMuxUpload_Handler,
		},
		{
			MethodName: "ListMuxUploads",
			Handler:    _MuxUploadService_ListMuxUploads_Handler,
		},
		{
			MethodName: "CreateMuxUpload",
			Handler:    _MuxUploadService_CreateMuxUpload_Handler,
		},
		{
			MethodName: "UpdateMuxUpload",
			Handler:    _MuxUploadService_UpdateMuxUpload_Handler,
		},
		{
			MethodName: "DeleteMuxUpload",
			Handler:    _MuxUploadService_DeleteMuxUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mux_upload/v0/mux_upload.proto",
}
