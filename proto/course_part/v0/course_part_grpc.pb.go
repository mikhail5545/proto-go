// github.com/mikhail5545/proto-go
// shared proto module for vitainmove project microservices
// Copyright (C) 2025  Mikhail Kulik

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: course_part/v0/course_part.proto

package coursepartpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoursePartService_Get_FullMethodName                       = "/course_part.v0.CoursePartService/Get"
	CoursePartService_GetWithDeleted_FullMethodName            = "/course_part.v0.CoursePartService/GetWithDeleted"
	CoursePartService_GetWithUnpublished_FullMethodName        = "/course_part.v0.CoursePartService/GetWithUnpublished"
	CoursePartService_GetReduced_FullMethodName                = "/course_part.v0.CoursePartService/GetReduced"
	CoursePartService_GetWithDeletedReduced_FullMethodName     = "/course_part.v0.CoursePartService/GetWithDeletedReduced"
	CoursePartService_GetWithUnpublishedReduced_FullMethodName = "/course_part.v0.CoursePartService/GetWithUnpublishedReduced"
	CoursePartService_List_FullMethodName                      = "/course_part.v0.CoursePartService/List"
	CoursePartService_ListDeleted_FullMethodName               = "/course_part.v0.CoursePartService/ListDeleted"
	CoursePartService_ListUnpublished_FullMethodName           = "/course_part.v0.CoursePartService/ListUnpublished"
	CoursePartService_ListReduced_FullMethodName               = "/course_part.v0.CoursePartService/ListReduced"
	CoursePartService_Create_FullMethodName                    = "/course_part.v0.CoursePartService/Create"
	CoursePartService_Publish_FullMethodName                   = "/course_part.v0.CoursePartService/Publish"
	CoursePartService_Unpublish_FullMethodName                 = "/course_part.v0.CoursePartService/Unpublish"
	CoursePartService_Update_FullMethodName                    = "/course_part.v0.CoursePartService/Update"
	CoursePartService_AddVideo_FullMethodName                  = "/course_part.v0.CoursePartService/AddVideo"
	CoursePartService_Delete_FullMethodName                    = "/course_part.v0.CoursePartService/Delete"
	CoursePartService_DeletePermanent_FullMethodName           = "/course_part.v0.CoursePartService/DeletePermanent"
	CoursePartService_Restore_FullMethodName                   = "/course_part.v0.CoursePartService/Restore"
)

// CoursePartServiceClient is the client API for CoursePartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoursePartServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetWithDeleted(ctx context.Context, in *GetWithDeletedRequest, opts ...grpc.CallOption) (*GetWithDeletedResponse, error)
	GetWithUnpublished(ctx context.Context, in *GetWithUnpublishedRequest, opts ...grpc.CallOption) (*GetWithUnpublishedResponse, error)
	GetReduced(ctx context.Context, in *GetReducedRequest, opts ...grpc.CallOption) (*GetReducedResponse, error)
	GetWithDeletedReduced(ctx context.Context, in *GetWithDeletedReducedRequest, opts ...grpc.CallOption) (*GetWithDeletedReducedResponse, error)
	GetWithUnpublishedReduced(ctx context.Context, in *GetWithUnpublishedReducedRequest, opts ...grpc.CallOption) (*GetWithUnpublishedReducedResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ListDeleted(ctx context.Context, in *ListDeletedRequest, opts ...grpc.CallOption) (*ListDeletedResponse, error)
	ListUnpublished(ctx context.Context, in *ListUnpublishedRequest, opts ...grpc.CallOption) (*ListUnpublishedResponse, error)
	ListReduced(ctx context.Context, in *ListReducedRequest, opts ...grpc.CallOption) (*ListReducedResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Unpublish(ctx context.Context, in *UnpublishRequest, opts ...grpc.CallOption) (*UnpublishResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	AddVideo(ctx context.Context, in *AddVideoRequest, opts ...grpc.CallOption) (*AddVideoResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	DeletePermanent(ctx context.Context, in *DeletePermanentRequest, opts ...grpc.CallOption) (*DeletePermanentResponse, error)
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error)
}

type coursePartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoursePartServiceClient(cc grpc.ClientConnInterface) CoursePartServiceClient {
	return &coursePartServiceClient{cc}
}

func (c *coursePartServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, CoursePartService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) GetWithDeleted(ctx context.Context, in *GetWithDeletedRequest, opts ...grpc.CallOption) (*GetWithDeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithDeletedResponse)
	err := c.cc.Invoke(ctx, CoursePartService_GetWithDeleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) GetWithUnpublished(ctx context.Context, in *GetWithUnpublishedRequest, opts ...grpc.CallOption) (*GetWithUnpublishedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithUnpublishedResponse)
	err := c.cc.Invoke(ctx, CoursePartService_GetWithUnpublished_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) GetReduced(ctx context.Context, in *GetReducedRequest, opts ...grpc.CallOption) (*GetReducedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReducedResponse)
	err := c.cc.Invoke(ctx, CoursePartService_GetReduced_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) GetWithDeletedReduced(ctx context.Context, in *GetWithDeletedReducedRequest, opts ...grpc.CallOption) (*GetWithDeletedReducedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithDeletedReducedResponse)
	err := c.cc.Invoke(ctx, CoursePartService_GetWithDeletedReduced_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) GetWithUnpublishedReduced(ctx context.Context, in *GetWithUnpublishedReducedRequest, opts ...grpc.CallOption) (*GetWithUnpublishedReducedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithUnpublishedReducedResponse)
	err := c.cc.Invoke(ctx, CoursePartService_GetWithUnpublishedReduced_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, CoursePartService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) ListDeleted(ctx context.Context, in *ListDeletedRequest, opts ...grpc.CallOption) (*ListDeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDeletedResponse)
	err := c.cc.Invoke(ctx, CoursePartService_ListDeleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) ListUnpublished(ctx context.Context, in *ListUnpublishedRequest, opts ...grpc.CallOption) (*ListUnpublishedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUnpublishedResponse)
	err := c.cc.Invoke(ctx, CoursePartService_ListUnpublished_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) ListReduced(ctx context.Context, in *ListReducedRequest, opts ...grpc.CallOption) (*ListReducedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReducedResponse)
	err := c.cc.Invoke(ctx, CoursePartService_ListReduced_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, CoursePartService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, CoursePartService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) Unpublish(ctx context.Context, in *UnpublishRequest, opts ...grpc.CallOption) (*UnpublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpublishResponse)
	err := c.cc.Invoke(ctx, CoursePartService_Unpublish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, CoursePartService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) AddVideo(ctx context.Context, in *AddVideoRequest, opts ...grpc.CallOption) (*AddVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVideoResponse)
	err := c.cc.Invoke(ctx, CoursePartService_AddVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, CoursePartService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) DeletePermanent(ctx context.Context, in *DeletePermanentRequest, opts ...grpc.CallOption) (*DeletePermanentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePermanentResponse)
	err := c.cc.Invoke(ctx, CoursePartService_DeletePermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursePartServiceClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreResponse)
	err := c.cc.Invoke(ctx, CoursePartService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoursePartServiceServer is the server API for CoursePartService service.
// All implementations must embed UnimplementedCoursePartServiceServer
// for forward compatibility.
type CoursePartServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetWithDeleted(context.Context, *GetWithDeletedRequest) (*GetWithDeletedResponse, error)
	GetWithUnpublished(context.Context, *GetWithUnpublishedRequest) (*GetWithUnpublishedResponse, error)
	GetReduced(context.Context, *GetReducedRequest) (*GetReducedResponse, error)
	GetWithDeletedReduced(context.Context, *GetWithDeletedReducedRequest) (*GetWithDeletedReducedResponse, error)
	GetWithUnpublishedReduced(context.Context, *GetWithUnpublishedReducedRequest) (*GetWithUnpublishedReducedResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	ListDeleted(context.Context, *ListDeletedRequest) (*ListDeletedResponse, error)
	ListUnpublished(context.Context, *ListUnpublishedRequest) (*ListUnpublishedResponse, error)
	ListReduced(context.Context, *ListReducedRequest) (*ListReducedResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Unpublish(context.Context, *UnpublishRequest) (*UnpublishResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	AddVideo(context.Context, *AddVideoRequest) (*AddVideoResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	DeletePermanent(context.Context, *DeletePermanentRequest) (*DeletePermanentResponse, error)
	Restore(context.Context, *RestoreRequest) (*RestoreResponse, error)
	mustEmbedUnimplementedCoursePartServiceServer()
}

// UnimplementedCoursePartServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoursePartServiceServer struct{}

func (UnimplementedCoursePartServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCoursePartServiceServer) GetWithDeleted(context.Context, *GetWithDeletedRequest) (*GetWithDeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithDeleted not implemented")
}
func (UnimplementedCoursePartServiceServer) GetWithUnpublished(context.Context, *GetWithUnpublishedRequest) (*GetWithUnpublishedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithUnpublished not implemented")
}
func (UnimplementedCoursePartServiceServer) GetReduced(context.Context, *GetReducedRequest) (*GetReducedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReduced not implemented")
}
func (UnimplementedCoursePartServiceServer) GetWithDeletedReduced(context.Context, *GetWithDeletedReducedRequest) (*GetWithDeletedReducedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithDeletedReduced not implemented")
}
func (UnimplementedCoursePartServiceServer) GetWithUnpublishedReduced(context.Context, *GetWithUnpublishedReducedRequest) (*GetWithUnpublishedReducedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithUnpublishedReduced not implemented")
}
func (UnimplementedCoursePartServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCoursePartServiceServer) ListDeleted(context.Context, *ListDeletedRequest) (*ListDeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeleted not implemented")
}
func (UnimplementedCoursePartServiceServer) ListUnpublished(context.Context, *ListUnpublishedRequest) (*ListUnpublishedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnpublished not implemented")
}
func (UnimplementedCoursePartServiceServer) ListReduced(context.Context, *ListReducedRequest) (*ListReducedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReduced not implemented")
}
func (UnimplementedCoursePartServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCoursePartServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedCoursePartServiceServer) Unpublish(context.Context, *UnpublishRequest) (*UnpublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpublish not implemented")
}
func (UnimplementedCoursePartServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCoursePartServiceServer) AddVideo(context.Context, *AddVideoRequest) (*AddVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideo not implemented")
}
func (UnimplementedCoursePartServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCoursePartServiceServer) DeletePermanent(context.Context, *DeletePermanentRequest) (*DeletePermanentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermanent not implemented")
}
func (UnimplementedCoursePartServiceServer) Restore(context.Context, *RestoreRequest) (*RestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedCoursePartServiceServer) mustEmbedUnimplementedCoursePartServiceServer() {}
func (UnimplementedCoursePartServiceServer) testEmbeddedByValue()                           {}

// UnsafeCoursePartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoursePartServiceServer will
// result in compilation errors.
type UnsafeCoursePartServiceServer interface {
	mustEmbedUnimplementedCoursePartServiceServer()
}

func RegisterCoursePartServiceServer(s grpc.ServiceRegistrar, srv CoursePartServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoursePartServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoursePartService_ServiceDesc, srv)
}

func _CoursePartService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_GetWithDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithDeletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).GetWithDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_GetWithDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).GetWithDeleted(ctx, req.(*GetWithDeletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_GetWithUnpublished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithUnpublishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).GetWithUnpublished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_GetWithUnpublished_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).GetWithUnpublished(ctx, req.(*GetWithUnpublishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_GetReduced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReducedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).GetReduced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_GetReduced_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).GetReduced(ctx, req.(*GetReducedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_GetWithDeletedReduced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithDeletedReducedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).GetWithDeletedReduced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_GetWithDeletedReduced_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).GetWithDeletedReduced(ctx, req.(*GetWithDeletedReducedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_GetWithUnpublishedReduced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithUnpublishedReducedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).GetWithUnpublishedReduced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_GetWithUnpublishedReduced_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).GetWithUnpublishedReduced(ctx, req.(*GetWithUnpublishedReducedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_ListDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).ListDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_ListDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).ListDeleted(ctx, req.(*ListDeletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_ListUnpublished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnpublishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).ListUnpublished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_ListUnpublished_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).ListUnpublished(ctx, req.(*ListUnpublishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_ListReduced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReducedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).ListReduced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_ListReduced_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).ListReduced(ctx, req.(*ListReducedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_Unpublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).Unpublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_Unpublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).Unpublish(ctx, req.(*UnpublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_AddVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).AddVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_AddVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).AddVideo(ctx, req.(*AddVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_DeletePermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermanentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).DeletePermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_DeletePermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).DeletePermanent(ctx, req.(*DeletePermanentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursePartService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursePartServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursePartService_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursePartServiceServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoursePartService_ServiceDesc is the grpc.ServiceDesc for CoursePartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoursePartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course_part.v0.CoursePartService",
	HandlerType: (*CoursePartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CoursePartService_Get_Handler,
		},
		{
			MethodName: "GetWithDeleted",
			Handler:    _CoursePartService_GetWithDeleted_Handler,
		},
		{
			MethodName: "GetWithUnpublished",
			Handler:    _CoursePartService_GetWithUnpublished_Handler,
		},
		{
			MethodName: "GetReduced",
			Handler:    _CoursePartService_GetReduced_Handler,
		},
		{
			MethodName: "GetWithDeletedReduced",
			Handler:    _CoursePartService_GetWithDeletedReduced_Handler,
		},
		{
			MethodName: "GetWithUnpublishedReduced",
			Handler:    _CoursePartService_GetWithUnpublishedReduced_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CoursePartService_List_Handler,
		},
		{
			MethodName: "ListDeleted",
			Handler:    _CoursePartService_ListDeleted_Handler,
		},
		{
			MethodName: "ListUnpublished",
			Handler:    _CoursePartService_ListUnpublished_Handler,
		},
		{
			MethodName: "ListReduced",
			Handler:    _CoursePartService_ListReduced_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CoursePartService_Create_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _CoursePartService_Publish_Handler,
		},
		{
			MethodName: "Unpublish",
			Handler:    _CoursePartService_Unpublish_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CoursePartService_Update_Handler,
		},
		{
			MethodName: "AddVideo",
			Handler:    _CoursePartService_AddVideo_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CoursePartService_Delete_Handler,
		},
		{
			MethodName: "DeletePermanent",
			Handler:    _CoursePartService_DeletePermanent_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _CoursePartService_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course_part/v0/course_part.proto",
}
